// Reg := 0
operation clear(Reg){
	1: if zero Reg then goto 0 else goto 2
	2: do dec Reg goto 1 
}

// RegA := RegA + RegB
operation add(RegA, RegB){
	1: do clear(T_addA) goto 2 

	2: if zero RegB then goto 6 else goto 3
	3: do dec RegB goto 4
	4: do inc RegA goto 5
	5: do inc T_addA goto 2

	6: if zero T_addA then goto 0 else goto 7
	7: do inc RegB goto 8
	8: do dec T_addA goto 6
	
}

// RegA := RegB
operation attrib(RegA, RegB){
	1: do clear(RegA) goto 2
	2: do add(RegA, RegB) goto 0
}

// RegA := RegA - RegB
operation sub(RegA, RegB){
	1: do attrib(T_subB, RegB) goto 2 

	2: if zero T_subB then goto 0 else goto 3
	3: if zero RegA then goto 0 else goto 4
	4: do dec RegA goto 5
	5: do dec T_subB goto 2
}

// RegA := RegA - RegB
operation sub(RegA, RegB, RegC){
	1: do attrib(T_subB, RegB) goto 2 
	2: do attrib(RegC, RegA) goto 3

	3: if zero T_subB then goto 0 else goto 4
	4: if zero RegC then goto 0 else goto 5
	5: do dec RegC goto 6
	6: do dec T_subB goto 3
}

// RegC := RegA * RegB
operation mult(RegA, RegB, RegC){
	1: do attrib(T_multA, RegA) goto 2
	2: do attrib(T_multB, RegB) goto 3
	3: do clear(RegC) goto 4

	4: if zero T_multB then goto 0 else goto 5
	5: do dec T_multB goto 6
	6: do add(RegC, T_multA) goto 4
}

// RegC := RegA^RegB
operation pow(RegA, RegB, RegC){
	1: if zero RegA then goto 0 else goto 2
	2: do attrib(T_powB, RegB) goto 3

	// RegC := 1
    3: do clear(RegC) goto 4
	4: do inc RegC goto 5

	// while(T_powB != 0){
	// 	T_powB := T_powB - 1;
	// 	RegC := RegC * RegA
	// }
	5: if zero T_powB then goto 0 else goto 6
	6: do dec T_powB goto 7
	7: do mult(RegC, RegA, RegC) goto 5
}

// RegA < RegB
test menor(RegA, RegB){
	1: if zero RegB then goto false else goto 2
	2: if zero RegA then goto true else goto 3

	3: do attrib(T_menorA, RegA) goto 4
	4: do attrib(T_menorB, RegB) goto 5

	5: do dec T_menorB goto 6
	6: do dec T_menorA goto 7
	7: if zero T_menorB then goto false else goto 8
	8: if zero T_menorA then goto true else goto 5
}

// RegA == RegB
test igual(RegA, RegB){
	1: do attrib(T_igualA, RegA) goto 2
	2: do attrib(T_igualB, RegB) goto 3
	
	// if(tempA == tempA == 0) return true
	3: if zero T_igualA then goto 4 else goto 5
	4: if zero T_igualB then goto true else goto false

	5: if zero T_igualB then goto false else goto 6
	6: do dec T_igualA goto 7
	7: do dec T_igualB goto 3
}

test maior(RegA, RegB){
	1: if menor(RegA, RegB) then goto false else goto 2
	2: if igual(RegA, RegB) then goto false else goto true
}


// RegC := RegA/RegB (divisão inteira)
// RegD := RegA%RegB
operation div(RegA, RegB, RegC, RegD){
	1: do clear(RegC) goto 2
	2: if zero RegB then goto 0 else goto 3
	3: if zero RegA then goto 0 else goto 4

	4: do attrib(RegD, RegA) goto 5

	//while(!(RegD < RegB)){
	//  RegD := RegD - RegB;
	//	RegC++;	
	//}
	5: if menor(RegD, RegB) then goto 0 else goto 6
	6: do sub(RegD, RegB) goto 7
	7: do inc RegC goto 5
}

// RegC := RegA/RegB (divisão inteira)
operation div(RegA, RegB, RegC){
	1: if zero RegB then goto 3 else goto 2
	2: if zero RegA then goto 3 else goto 4

	3: do clear(RegC) goto 0


	4: do attrib(T_divA, RegA) goto 5
	5: do clear(RegC) goto 6

	//while(!(T_divA < RegB)){
	//  T_divA := T_divA - RegB;
	//	RegC++;	
	//}
	6: if menor(T_divA, RegB) then goto 0 else goto 7
	7: do sub(T_divA, RegB) goto 8
	8: do inc RegC goto 6
}

// RegC := RegA%RegB (resto da divisão)
operation resto(RegA, RegB, RegC){
	1: do clear(RegC) goto 2
	2: if zero RegB then goto 0 else goto 3
	3: if zero RegA then goto 0 else goto 4

	4: do attrib(RegC, RegA) goto 5

	//while(!(RegC < RegB)){
	//  RegC := RegC - RegB;
	//}
	5: if menor(RegC, RegB) then goto 0 else goto 6
	6: do sub(RegC, RegB) goto 5
}

// RegA%RegB == 0
test divBy(RegA, RegB){
	1: do clear(T_divByR) goto 2
	2: if zero RegB then goto false else goto 3
	3: if zero RegA then goto false else goto 4

	4: do resto(RegA, RegB, T_divByR) goto 5
	5: if zero T_divByR then goto true else goto false
}


// RegA := x | pair(x,y)
operation fst(RegA, Pair){
	1: do clear(RegA) goto 2
	2: do attrib(T_fstPair, Pair) goto 3
	3: do clear(T_fst2) goto 4
	4: do add T_fst2 2 goto 5
	
	5: if divBy(T_fstPair, T_fst2) then goto 6 else goto 0
	6: do div(T_fstPair, T_fst2, T_fstPair) goto 7
	7: do inc RegA goto 5
}

// RegA := y | pair(x,y)
operation snd(RegA, Pair){
	1: do clear(RegA) goto 2
	2: do attrib(T_sndPair, Pair) goto 3
	3: do clear(T_snd3) goto 4
	4: do add T_snd3 3 goto 5
	
	5: if divBy(T_sndPair, T_snd3) then goto 6 else goto 0
	6: do div(T_sndPair, T_snd3, T_sndPair) goto 7
	7: do inc RegA goto 5
}

// RegC := (RegA, RegB)
operation pair(RegA, RegB, RegC){
	1: do clear(RegC) goto 2
	2: do clear(T_pairFat) goto 3
	3: do add T_pairFat 2 goto 4
	
	4: do pow(T_pairFat, RegA, RegC) goto 5
	5: do inc T_pairFat goto 6
	6: do pow(T_pairFat, RegB, T_pairAux) goto 7
	7: do mult(RegC, T_pairAux, RegC) goto 0
}


// 3. Considere a sequência de números Tn, com n ∈ N, definida pela seguinte recorrência: T0 = 2, T1 = 5, Tn = 3Tn−1 − 2Tn−2 para n > 1. Por exemplo, T8 = 767.
//(a) Construa um programa monolítico para máquina Norma que tenha f(n) = Tn como função computada

operation calcularTn(RegN, RegTn){
    // Define os registradores auxiliares
    1: do clear(T_TnMenos2) goto 2 
    2: do add T_TnMenos2 2 goto 3 // T0 := 2

    3: do clear(T_TnMenos1) goto 4
    4: do add T_TnMenos1 5 goto 6 // T1 := 5
    
	6: do clear(T_TnCTE2) goto 7
    7: do add T_TnCTE2 2 goto 8 // CTE2 := 2
    
	8: do clear(T_TnCTE3) goto 9
    9: do add T_TnCTE3 3 goto 10 // CTE3 := 3


	// Caso base 1:
    // Se n = 0 atribui 2
    10: if zero RegN then goto 11 else goto 12
    11: do attrib(RegTn, T_TnMenos2) goto 0

	// Caso base 2:
    // Se n = 1 atribou 5
    12: if cmp RegN 1 then goto 13 else goto 14
    13: do attrib(RegTn, T_TnMenos1) goto 0


    // Define o registrador contador e auxliar
    14: do clear(T_TnC) goto 15
    15: do add T_TnC 2 goto 16
    16: do clear(T_TnAux) goto 17
	
	// Método construtivo, inicia em 2 e vai até n
    //while(contador < n)
    17: if menor(RegN, T_TnC) then goto 0 else goto 18

    18: do mult(T_TnMenos1, T_TnCTE3, RegTn) goto 19 // Tn := 3 * Tn-1
    19: do mult(T_TnMenos2, T_TnCTE2, T_TnAux) goto 20 // Taux := 2 * Tn-2
    20: do sub(RegTn, T_TnAux) goto 21 // Tn := Tn - Taux  // (3*Tn-1 - 2*Tn-2)
    21: do attrib(T_TnMenos2, T_TnMenos1) goto 22 // Tn-2 := Tn-1, Tn-2 se torna Tn-1
    22: do attrib(T_TnMenos1, RegTn) goto 23 // Tn-1 := Tn, Tn-1 se torna Tn
    23: do inc T_TnC goto 17 // contador++
	// end while
}

main{
    1: do calcularTn(X, Y) goto 0
}