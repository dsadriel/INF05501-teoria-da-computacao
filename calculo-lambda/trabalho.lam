let
    omega = \x.x x; -- auto-aplicação
    OMEGA = omega omega; -- auto-aplicação da auto-aplicação
    Y = \f. (\x. f (x x)) (\x. f (x x)); -- combinador de ponto fixo
    
    -- # -- # -- # -- # -- # -- # -- # -- # --
    --                LÓGICA                --
    -- # -- # -- # -- # -- # -- # -- # -- # --
    true = \x y. x;
    false = \x y. y;
    if = \b x y. b x y;
    not = \b. b false true;
    and = \a b. a b false;
    or = \a b. a true b;
    isZero = \x. x (\x. false) true;
    
    -- # -- # -- # -- # -- # -- # -- # -- # --
    --                  PARES               --
    -- # -- # -- # -- # -- # -- # -- # -- # --
    pair = \a b. \c. c a b;        
    fst = \p. p true;
    snd = \p. p false;    
    swap = \p. pair (snd p) (fst p);


    -- # -- # -- # -- # -- # -- # -- # -- # --
    --                  LISTAS              --
    -- # -- # -- # -- # -- # -- # -- # -- # --
    empty = \x. true;
    isEmpty = \l. l (\x y. false);
    cons = pair;
    head = fst;
    tail = snd;
    

    -- # -- # -- # -- # -- # -- # -- # -- # --
    --               ARITMÉTICA             --
    -- # -- # -- # -- # -- # -- # -- # -- # --
    succ = \n. \f x. f (n f x); 
    add = \a b. (a succ) b;
    mult = \a b. a (\x. add b x) 0;
    pow2 = \a b. b (\x. mult a x) 1;
    pow = \a b. b a;    
    shiftInc = \p. pair (snd p) (succ (snd p));
    pred = \n. fst (n shiftInc (pair 0 0));        
    sub = \a b. b pred a;

    -- # -- # -- # -- # -- # -- # -- # -- # --
    --                LÓGICA                --
    -- # -- # -- # -- # -- # -- # -- # -- # --
    lessThan = \a b. not (isZero (sub b a));
    equalTo = \a b. (lessThan a b) false (isZero (sub a b));
    greaterThan = \a b. and (lessThan b a) (not (equalTo a b));


    -- # -- # -- # -- # -- # -- # -- # -- # --
    --               ARITMÉTICA             --
    -- # -- # -- # -- # -- # -- # -- # -- # --
    -- div: divisão inteira de a por b
    R_div = \R a b. if (or (or (isZero b) (isZero a)) (lessThan a b))
                    0
                    (succ (R (sub a b) b));
    div = Y R_div;
    -- remainder: resto da divisão de a por b
    R_remainder = \R a b. if (or (or (isZero b) (isZero a)) (lessThan a b))
                            a
                            (R (sub a b) b);
    remainder = Y R_remainder;
    -- fat: fatorial
    S_fat = \R. \n. if (isZero n) 
                    1
                    (mult n (R (pred n)));
    fat = Y S_fat;


    -- # -- # -- # -- # -- # -- # -- # -- # --
    --              ALTA ORDEM              --
    -- # -- # -- # -- # -- # -- # -- # -- # --
    -- map
    R_map = \R func l. if (isEmpty l)
                        empty -- se a lista for vazia, retorna vazio
                        (cons -- cc constroi uma lista com:
                            (func (head l))  -- o resultado da func aplicada no primeiro item
                            (R func (tail l))); -- o mapa do resto da lista
    map = Y R_map;

    -- fold
    R_fold = \R func base l. if (isEmpty l) -- se for vazia retorna o valor da base
                                base
                                (func  -- caso contrário executa a função sobre o head 
                                    (head l)  
                                    (R func base (tail l))); -- e sobre o resultado da função aplicada o resto da lista
    fold = Y R_fold;

    -- filter
    R_filter = \R test l. if (isEmpty l)
                            empty -- se for vazia, retorna vazio
                            (if (test (head l)) -- se o primeiro elemento satisfazer o teste
                                (cons -- constroi uma lista:
                                    (head l) -- com o primeiro elemento
                                    (R test (tail l))) -- e o resto da lista filtrada
                                (R test (tail l))); -- cc retorna o resto da lista filtrada
    filter = Y R_filter;



    --################################################--
    --####               TRABALHO 2               ####--
    --################################################--

    -- (a) igual = true se a = b || false se b != a
    igual = \a b. equalTo a b;
    
    -- (b) pol ␣ a ␣ b = a² + 3b
    pol = \a b. add (pow a 2) (mult b 3);
    
    -- (c) multTres ␣ n = true se n múltiplo de 3 || false caso contrário
    multTres = \n. isZero (remainder n 3);
    
    -- (d) multFrac ␣ (a,b) ␣ (c,d) = (ac,bd)
    multFrac = \ab cd. pair (mult (fst ab) (fst cd)) (mult (snd ab) (snd cd));
    
    -- (e) somaFrac ␣ (a,b) ␣ (c,d) = (ad + bc,bd)
    somaFrac = \ab cd. pair (add (mult (fst ab) (snd cd)) (mult (snd ab) (fst cd)) ) (mult (snd ab) (snd cd));
    
    -- (f) geraLista ␣ n = [n, n −1,n−2, ... ,1] se n > 0 || [] se n = 0
    R_geraLista = \R n. if (isZero n)
                            empty
                            (cons n (R (pred n)));
    geraLista = Y R_geraLista;
    
    -- (g) multLista ␣ l = a1 ×···×an se l = [a1,a2,...,an] || 0 se l = []    
    R_multLista = \R l. if (isEmpty l)
                            1 
                            (mult (head l) (R (tail l)));
    multLista_ = \l. if (isEmpty l) 0 (Y R_multLista l);

    multLista = \l. if (isEmpty l) 0  (fold mult 1 l); -- usando funções de alta ordem
    
    -- (h) seq ␣ n = T(n) : 2 se n = 0 || 5 se n = 1 || 3T(n-1) - 2T(n-2) se n > 1
    R_seq = \R n. if (equalTo n 0)
                    2 
                    (if (equalTo n 1) 
                        5 
                        (sub 
                            (mult 3 (R (pred n)))
                            (mult 2 (R (sub n 2)))));
    
    seq = Y R_seq;


in
    0